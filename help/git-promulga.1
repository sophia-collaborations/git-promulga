.TH GIT-PROMULGA 1
.nh
.SH NAME
git-promulga - A nutbag system for advanced synchronization operations in Git.
.SH SYNOPSIS
.B git-promulga
[\fIoptions\fR]
.SH DESCRIPTION
\fBgit-promulga\fR does advanced synchronization-related operations
that are configured specifically for each individual clone of a
Git repository.

The first thing that \fBgit-promulga\fR does is
search for the containing \fBgit-promulga\fR eligible
directory.
To do this, it keeps searching up and up the directory tree
(starting with the current-working-directory
and moving on up)
until it finds a containing directory
that contains within it a sub-directory named \(dqgit\(dq
(which is the sign it checks for presence in a Git
directory).

Once it meets this rudimentary satisfaction that it is
in the head directory of a Git repository, it then
tries to see if this repository has an
appropriate \fBgit-promulga\fR configuration directory.
There are two ways that this criterion can be satisfied -
with an internal configuration directory or an external one.
It checks first for an external configuration directory
(which is the encouraged way of doing things) and if
that fails, then checks for an internal configuration directory
(which was the way in the eariest stages of the program's
development, but has now been deprecated, and is only
supported as a legacy feature until noon of July 4, 2017).
If neither
type of configuration directory is found, then
it concludes that this is not a \fBgit-promulga\fR
eligible directory,
and the search will continue to the next
directory up the tree.

More on these tests in the section of this manual-page
labeled "The Configuration Directory".

So in short - \fBgit-promulga\fR is looking for
the head directory of a git project who's local clone
is configured for \fBgit-promulga\fR.
When it finds that directory,
it loads the contents of the \(dqmain.dat\(dq
file inside the configuration
directory (known as the \(dqdirective file\(dq), and carries out every
directive in that
file that is applicable to the mode that it is
being run in (which is \(dqmain\(dq by default, but can
be changed by the \fB-md\fR command-line option described
in the section of this manual page labeled \(dqOptions\(dq).

For more information on the structure of the directive file, see
the section of this manual-page labeled \(dqThe Directive File\(dq.
.SH THE CONFIGURATION DIRECTORY
For a directory to be deemed a suitable home-base for
\fBgit-promulga\fR, it is not enough for it to be the
head directory of a Git repository (though that is
requried too). The repository must also have a
configuration directory to define the local specifics
of how \fBgit-promulga\fR functions.

Upon concluding that it is in-fact in the head directory
of a Git repository,
\fBgit-promulga\fR first checks for an external configuration
directory - that is, a configuration directory that is
(presumably, at least) located outside of the repository
itself.

The first thing it does to find an external configuration
directory is read the local Git configuration variable
\(dqpromulga.dir\(dq.
If that configuration variable is absent from the
repository's local config - or if it has a value of \(dqx\(dq,
then the test fails.
Otherwise, it checks to see if the file \(dqmain.dat\(dq
exists in the directory named by that variable
(which if it does, implicitly means that the directory itself
does in fact exist).
If that file is found, then the named directory is
identified as the configuration directory - the test is
passed - and no check will be made for an internal configuration directory.

If, however, the test for an external configuration directory fails,
then \fBgit-promulga\fR will check (at least for the time being)
for an internal configuration directory.
This is not the preferred way of doing things, and is only
suppoorted at all for the legacy of the earliest stages
of this program's development.
As a matter of fact, in the future, that will be the
only way to do things - because support for internal
configuration directories
has been deprecated and legacy support will be discontinued
at noon on July 4, 2017.

The first thing that \fBgit-promulga\fR does in checking for
an internal configuration directory is that the file
\(dq.promulga/main.dat\(dq exists.
That is the first criterion for an internal configuration directory.
However (unlike an external directory which is, at least presumably,
outside of the repository itself) another measure need to be taken
to assure that the contents of the configuration directory
do not get exchanged between the various clones of a project.
For this reason, \fBgit-promulga\fR will at this point scan
the \(dq.gitignore\(dq
file to see if it has a line who's contents are \(dq/.promulga\(dq.
If it finds that line, then \(dq.promulga\(dq within the head directory
of the Git repository is identified
as the configuration directory.
However, if either of these criteria is not met,
then the test for an internal configuration directory also fails.
.SH OPTIONS
The options are processed in the order that they appear on the command line.
Each option overrides any earlier option to it's contrary.
.TP
.BR --help
.br
Displays this help file - and exits the program once
you are finished reading it.
.TP
.BR -cnf " " <\fIdir\fR> " " <\fIident\fR>
.br
Sets the configuration directory to <\fIdir\fR> and the
unique-identifier of the project to <\fIident\fR>.

This option must come at the end of the command line -
and if it is invoked, the program will not actually do
the promulgation (in this run that is) but will only
do the changes in the
local repository's configuration.

This option will throw a fatal error if (a) there are any
arguments in the command line after the last argument to
this option or (b) the directory specified does not pass
the test of a valid configuration directory.

This option was added in order to make it easier to
set up external configuration directories --
as external configuration directories is the way
things are supposed to be done now.
.TP
.BR -md " " <\fImode\fR>
.br
Sets the mode (which in turn determines which directives are
carried out) to the one identified by the name \fImode\fR.
A mode-name should only have alphanumeric characters in it
(as well as the occasional underscore that is permitted
just in case one needs it to separage words within a mode name) -
and is case-sensitive.
The default value is \(dqmode\(dq.
.SH THE DIRECTIVE FILE
There are two kinds of lines in the Directive File -
validation lines and directive lines.

The first part of each line
(that is, everything before the first-colon)
is known as the 'modal section'
and it is a list of all the modes that the
line pertains to separated by forward-slashes.
In the case of validation lines, all items on
this list must be the literal names of modes.
In the case of directive lines, however,
an item could simply be an asterisk ('*')
thereby refering collectively to all modes
that have been thus-far validated.
The reason why such wild-carding is not allowed
in validation lines is because each mode, to be
valid, must be specifically specified
(and the default mode of \(dqmain\(dq is not
exempt from this criterion).
The only time that a mode may be validated
by wildcard is if it already was previously
validated but has been de-activated by
a directive such as an \fBx\fR directive.

The second part of each line (that is, everything
between the first colon and the second colon)
is known as the 'activity section'.
If it's value is \(dqvalid\(dq, that signifies
a validation line.
Otherwise, it contains a string specifying what
type of directive if is.
The different possible values of this section
are detailed in the section of this manual-page
labeled \(dqDirective Types\(dq.

In a sense, one might be tempted to think
of validation lines as regular directive
lines of directive-type \(dqvalid\(dq.
However - there are a few distinctions.
One, of course, is that wild-carding of
mode-names is generally permitted in these lines
(with the already-mentioned exception).
The other is that no directive line is allowed
to apply to any specific mode (even if it's
name is specifically listed in the modal section)
unless a validation line has specified it first.

The third section of the line is known as the 'content section'.
It simply contains any argumentation needed for a directive.
Since the two colons that separate the sections of the line
all come before this section, this is the only section that
can have colons within it.
As a matter of fact, any colon in the content section
(that is, any colon in the entire line other than the first two)
may simply be no more than a literal colon - unless the
function of the directive-type specifies otherwise.

In case this is too abstract,
let's look at a little sample.

.RS 3
main:\fIvalid\fR:
.br
out/in:\fIvalid\fR:
.br
*:\fIcommit\fR:
.br
*:\fIremotes\fR:origin:
.br
main/in:\fIpull\fR:master:dev:
.br
*:\fImerge\fR:dev:master:dev:
.br
main/out:\fIpush\fR:master:dev:
.br
main/out:\fIsh\fR:ssh myself@some.where
.br
      < \(dq${GIT_PROMULGA_DIR}/to-myself.cmd\(dq
.RE

Let's look at it again - this time with line-number labels
for reference sake (a convention that will be followed for all
sample-files for the remainder of this manual-page).

.RS 3
 \fB1\fR: main:\fIvalid\fR:
.br
 \fB2\fR: out/in:\fIvalid\fR:
.br
 \fB3\fR: *:\fIcommit\fR:
.br
 \fB4\fR: *:\fIremotes\fR:origin:
.br
 \fB5\fR: main/in:\fIpull\fR:master:dev:
.br
 \fB6\fR: *:\fImerge\fR:dev:master:dev:
.br
 \fB7\fR: main/out:\fIpush\fR:master:dev:
.br
 \fB8\fR: main/out:\fIsh\fR:ssh myself@some.where
.br
 \fB8\fR(cont):    < \(dq${GIT_PROMULGA_DIR}/to-myself.cmd\(dq
.RE

In addition to the fact that we now have line-numbers
by which to reference the lines in the description,
it is now also clear that Line 8 (though divided into
two lines in this manual-page for the sake of typesetting)
must, in fact, be a single line in the actual file
being described.

Okay - in this repository, \fBgit-promulga\fR recognizes
three modes ("main" specified in line 1 and "out" and "in"
specified in line 2).

Line 3 is a directive of type "commit".
As the mode listed is the wild-card asterisk,
it pertains to all modes that have thus-far
been validated.
Directives of this type do more than just "git commit".
They also take care of all the staging and everything
so that you don't have to worry about that.

So, if \fBgit-promulga\fR is invoked with a valid mode,
then after line 3, all changes since last time will have
been staged and committed. However, they will be restricted
to the local repository.

Line 4 is a directive of type \(dqremotes\(dq.
It's content section is nothing more or less than
a colon-separated list of all the Git remotes that
subsequent pull and push commands will pull and push from
(at least until a later directive of this type changes it).
For this reason, in the next line (Line 5), it is
from the \(dqorigin\(dq remote that the \(dqmaster\(dq branch
and then the \(dqdev\(dq branch are pulled.

After Line 5, the local clone will have the \(dqdev\(dq branch
checked out (if it exists - more on
the limitations of this directive-type
in it's section) because that is the last branch
listed in this line.

Line 5, of course, will be ignored if the mode that
the program is run in is \(dqout\(dq, because the
modal section limits it to the \(dqmain\(dq
and \(dqin\(dq modes.

Line 6 merges the two branches of the local repository
- once again (usually) leaving the \(dqdev\(dq branch
checked out - because it is (once again) the last
branch mentioned.

Line 7 simiarly pushes the commits of the \(dqmaster\(dq
and \(dqdev\(dq branches (still to the \(dqorigin\(dq
remote, because that never got changed) - unless
\fBgit-promulga\fR is running in mode \(dqin\(dq.

Finally comes Line 8, a directive of type \(dqsh\(dq
- which means that it's content section is simply run
as-is as a shell-command.
This line (unless your are in mode \(dqin\(dq)
opens a SSH connection to the account \(dqmyself\(dq
on the server \(dqsome.where\(dq (presumably
where the \(dqorigin\(dq branch is located).
Instead of opening a terminal session on SSH,
it pipes to SSH the contents of the file
\(dqto-myself.cmd\(dq inside of the
\fBgit-promulga\fR configuration directory.

As noted - the source that gets piped to SSH
is in the \(dq.promulga\(dq directory.
This is because \fBgit-promulga\fR insists
that the entire directory must be git-ignored,
yet \(dqmain.dat\(dq is the only file within it
that is of special significance to \fBgit-promulga\fR.
That makes this directory a convenient place
to put resource files like this.

But before we end this section of the documentation there is
one more thing to discuss.
Everything we did so far is fine if the
server we are working with grants access absolutely 100% of the
time and the internet connection to it is equally reliable.
Unfortunately, we all know that this is a dubious
proposition.
For this reason, we have directive-types that use a feature
called 'persistence'.
That means that if certain actions do not work the first
time, they try again.

Here is a version of the sample "main.dat" above,
only modified so that it uses
such directive-types.

.RS 3
 \fB1\fR: main:\fIvalid\fR:
.br
 \fB2\fR: out/in:\fIvalid\fR:
.br
 \fB3\fR: *:\fIcommit\fR:
.br
 \fB4\fR: *:\fIprcset\fR:5/10/15/20/25/30/35/40/45/50/55/60:
.br
 \fB5\fR: *:\fIremotes\fR:origin:
.br
 \fB6\fR: main/in:\fIprcpull\fR:master:dev:
.br
 \fB7\fR: *:\fImerge\fR:dev:master:dev:
.br
 \fB8\fR: main/out:\fIprcpush\fR:master:dev:
.br
 \fB9\fR: main/out:\fIprcsh\fR:ssh myself@some.where
.br
 \fB9\fR(cont):    < \(dq${GIT_PROMULGA_DIR}/to-myself.cmd\(dq
.RE

A new Line 4 is added (causing the old Lines 4 thru 8 to now
become Lines 5 thru 9).
This new Line 4 is of directive-type "prcset".
It sets the persistence schedule - which is a list
of numbers separated by forward-slashes.
As a result of Line 4, henceforth,
if a persistent operation fails, it will be attempted again
5 seconds afterwards.
If again it fails, it will wait another 10 seconds and try again --
then, upon another failure, 15 seconds - and so forth.
Hopefully, the operation will succeed before it reaches the end
of the list.
But if at the end (if it fails after the final wait - which is 60-seconds)
then it will give up and move on.

A few of the later directives have been modified to use this
persistence.
For example, the "pull" directives have been replaced
with "prcpull" directives.
The only difference is that the "git pull" command
invoked for every remote-branch combination will be called
with this persistence.
And to do the same for "git push" commands invoked,
the "push" directives have been replaced by "prcpush"
directives.

Last but not least - the "sh" directive has been replaced
by a "prcsh" directive - meaning that if the shell command
returns an error, it will be called over and over with
such persistence in hopes that it returns without error
before the persistence line runs out.

There is, of course, one more limitation to persistence
for the time being
(which hopefully will be resolved in later versions,
but should be mentioned while it is present).
The success of the "git push" and "git pull" operations
are determined by whether or not the shell-commands
to "git pull" and "git push" return with error or
without error.
Unfortunately, this is not a completely reliable
method as it has been observed that unexpected
hangups from the remote failed to result in
an error-return of the shell command -- thus
preventing persistence from kicking in, and
causing \fBgit-promulga\fR to go on about it's
merry way as though nothing had gone wrong.
Hopefully, a better test for success will be
coded into later version -- but until then,
user beware.
.SH DIRECTIVE TYPES
This section is still a work-in-progress, so
not all the directive-types are listed yet.
However, combined with the examples provided in
the previous section,
this section will provide enough information
on the directive types to allow you to unleash
the full power of the current version of \fBgit-promulga\fR.
.TP
.BR \fBbranch\fR
.br
A directive of this type simply has the function of
using a \(dqgit checkout\(dq command to change
branch.
It's content section is a colon-separated list
who's first item is the name of a branch.
It's first item is a branch-identifier
(which means that it is either literally the name of
a branch or an asterisk to indicate the
branch that this repository had checked out at
the time that \fBgit-promulga\fR was invoked).
The program attempts to check out the branch
identified in this identifier.

The rest of the items on the list are a series
of actions to be taken if the initial checkout
fails until one of the backup actions succeeds
(or until the list reaches it's end). These
options are as follows:

.RS 8
\fBdie\fR
.RS 3
This option, if reached, causes a fatal-error
for \fBgit-promulga\fR.
.RE

\fbfrc\fR
.RS 3
This option attempts to do the checkout with the
\fB-b\fR option. (See \fBgit-checkout\fR for details.)
.RE
.RE
.TP
.BR \fBcommit\fR
.br
A directive of this type does a commit -- including
the automatic staging of all changes
that aren't blocked by gitignore.
If, for some reason you choose not
to do the commit (by not including the
required line of the change-logue)
then all staging will be reset afterwards.
.TP
.BR \fBcontinue-upward\fR
.br
Normally, after finding a suitably-configured
Git directory and processing it's directives,
\fBgit-promulga\fR exits.
However, this directive cancels that exit,
causing \fBgit-promulga\fR (after finishing to
process this directory) to keep searching higher
up the tree for yet another properly-configured
directory to process.

Everything in the content section of this directive
prior to the first colon
(that is, everything between the second and third
colons of the entire directive line)
is the name of a mode (yes - the same kind
of mode that in the command-line is at the mercy
of the \fB-md\fR option) - and it identifies the
mode that \fBgit-promulga\fR will switch to after
finishing to process this directory before continuing
it's search upward. If a simple asterisk is present
instead of a proper mode-name, that simply means
that the mode will be unchanged.
.TP
.BR \fBmerge\fR
.br
The content section here is a colon-separated list of
branch-identifiers (already explained what that means).
Starting with the second branch on the list,
each branch has the previous branch on the list merged
into it.

At the end of this directive's operation, the last
branch on this list is the one checked out in the local
repository.
.TP
.BR \fBprcset\fR
.br
Sets the list of second-intervals to wait
between attempts if a persistent directive
fails on it's earlier attempts.
Everything between the second and third column on
this line (that is, the entire content section prior
to it's first colon) is a list of numbers separated by
forward-slashes -- each of which indicates
the number of seconds to wait before a retry.
.TP
.BR \fBprcsh\fR
.br
Just like the \fBsh\fR directive, except for that
it uses the persistence feature.
.TP
.BR \fBremotes\fR
.br
The content section of a directive of this type is
a colon-separated list of remotes.
From now until the next \(dqremotes\(dq directive,
the remotes on the list will be the ones accessed
through every pull and push operation.
.TP
.BR \fBsh\fR
.br
A directive of this type simply runs the entire
content section of the directive line as-is as
a shell command.
.TP
.BR \fBx\fR
.br
A directive of this type halfway turns off the
validation of any mode
that it applies to.

By \(dqhalfway\(dq it is meant that
the mode isn't entirely invalidated
in that \fBgit-promulga\fR
remembers that the mode was previously validated
and you won't get an error-message for selecting
an invalid mode
\- and that everything that was done while it was
validated (including, if-applicable, the effects
of any \fBcontinue-upward\fR
directive) remain-done.
But it also means that the mode is not
entirely validated anymore either - in that
it has to be re-validated for any further
directives later on in the configuration file
to have any applicability to that mode.
.SH ENVIRONMENT VARIABLES
The following environment variables are set by \fBgit-promulga\fR
and as such can be used by shell commands.
.TP
.BR \fBGIT_PROMULGA_DIR\fR
.br
The location of the configuration directory. See the section
of this manual-page labeled "The Configuration Directory"
to find out how this value is determined.
.TP
.BR \fBGIT_PROMULGA_RPID\fR
.br
The value of the local Git config variable \(dqpromulga.repoid\(dq.
If this config variable is absent from the local repository,
then it defaults to the value \(dqsolo\(dq.

The reason for this environment variable is that, in the event
that multiple repositories share a common configuration directory
(which at times may be expedient so as to avoid redundancies)
there might still be a need to uniquely identify the repository
it is presently being used from.
For that reason, if multiple repositories do indeed share
the same configuration directory, it is important to make
sure that they all have the \(dqpromulga.repoid\(dq variable
set, and that each one has it set to it's unique value.
